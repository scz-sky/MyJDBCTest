一.向数据表中插入一条 Student 记录的思路 步骤

1).新建一个Student 对应的examstudents数据表
class  Student{
        int flowId;//流水号
        int type;//考试的类型
        String inCard;//身份证号
        String examCard;//准考证号
        String studentName;//学生名
        String location;//学生地址
        int grade;//考试分数
}
2).在测试方法TestaddStudent()方法中
 //1.获取从控制台输入的Student对象：
  Student student =getStudentFromConsole();
  
 //2.调用addStudent(Student stu)方法执行，进行操作
 
3).新建一个方法： void addStudent(Student student)
把参数 Student 对象插入到数据库中
addStudent(Student stu){
// 1.准备一条SQL语句：
  String sql =" INSERT INTO examstudents "
          +"VALUES("+student.getFlowId()
          +","+ student.getType()
          +",' "+student.getIdCard()
          +" ' , ' " +student.getExamCard()
          +" ' , ' " +student.getStudentName()
          +" ' , ' " +student.getLocation()
          +" ' , "+student.getGrade()+" )";
          
  // 2.调用JDBCTools类的update(sql)方法执行插入操作
    JDBCTools.update(sql);
  }

  
  
  二. 使用 preparedStatement
  1).why?
    ①使用statement 需要进行拼写 SQL语句 很辛苦，而且容易出错
       String sql =" INSERT INTO examstudents "
               +"VALUES("+student.getFlowId()
               +","+ student.getType()
               +",'"+student.getIdCard()
               +"','" +student.getExamCard()
               +"','" +student.getStudentName()
               +"','" +student.getLocation()
               +"',"+student.getGrade()+")";
   ②可以有效的禁止SQL注入
          SQL注入：是利用某些系统没有对用户输入的数据进行充分的检查，而在数据输入数据中注入非法的
          SQL语句段或者命令，从而利用系统的SQL引擎完成恶意行为的做法 
   ③preparedStatement，可以最大可能提高性能
               
    2).  PrepareedStatement是Statement的子接口，可以传入带占位符的SQL语句,
    并且提供了补充占位符变量的方法
    
    3).使用   PreparedStatement         
    ①创建  PreparedStatement        
          String sql="INSERT INTO table1(username,age,salary)"+"VALUES(?,?,?)";
          preparedStatement=connection.prepareStatement(sql);
  
  String sql="INSERT INTO examstudent VALUES(?,?,?,?,?,?,?,)"
  PreparedStatement  ps=conn.prepareStatement(sql);
  ② 调用PreparedStatement的setXxx(int index,object val)设置的占位符值
     index 索引值从1开始。
            preparedStatement.setString(1, "FengLing");
            preparedStatement.setString(2,"29");
            preparedStatement.setString(3, "3300");
            
  ③ 执行SQL语句：executeQuery()或 executeUPdate().  
     注意：执行时不需要执行sql语句
     preparedStatement.executeUpdate();
  
  以下是使用PreparedStatement的示例代码
  String sql="INSERT INTO table1(username,age,salary)"+"VALUES(?,?,?)";
            preparedStatement=connection.prepareStatement(sql);
            
            preparedStatement.setString(1, "FengLing");
            preparedStatement.setString(2,"29");
            preparedStatement.setString(3, "3300");
            
            preparedStatement.executeUpdate();
  
  
  
  三.ResultSetMetADate
  1.why?  如果只有一个结果集，但不知道该结果集有多少列 、列的名字是多少
 1）编写通用的查询方法时需要使用
Public<T> T get(Class<T> clazz,String sql,Objtct…args)

2.what? 用于描述ResultSet的元数据对象 即从中可以或获取到结果集中有多少列，列名是什么

3.how？
①得到ResultSetMetaDate的对象：调用ResultSet的getMetaDate方法
    ResultSetMetaDate rsmd=resultSet.getMetaData();
② ResultSetMetaDate有哪些好的方法？
   Int getColumnCount():SQL语句中包含那些列
   String getColumnLabel(int column):获取指定列的的别名，其中的索引从1开始

//获取结果集的每一列别名
For (int i=0;i<rsmd.getColumnCount();i++){
   String columnLabel=rsmd.getColumnLabel(i+1);
   Object columnValue=resultSet.getObject(columnLabel);

Values.put(columnLabel,columnValue);
}
// 关于ResultSetMetaDate的示例代码

①得到ResultSetMetaDate的对象：调用ResultSet的getMetaDate方法
    ResultSetMetaDate rsmd=resultSet.getMetaData();
While(resultSet.next())

 // 2.打印每一列的列名
     for(int i=0;i<rsmd.getColumnCount();i++){
                String columnLabel=rsmd.getColumnLabel(i+1);
                Object columnValue=resultSet.getObject(columnLabel);
                
                values.put(columnLabel, columnValue);// columnLabel列 columnValue 值
            }
          }
            System.out.println(values);
            
                 java类的属性 
① 在JAVAEE中，java类的属性通过getter，setter 来定义：get（或set）方法，
去除get（或set）后，字母的小写,即为JAVA类的属性
② 而以前叫的那个属性，即为成员变量 称之为字段
③一般情况下，字段名和属性名都一致
④ 操作JAVA 类的属性有一个工具包：beanutils
 搭建环境：需要同时加入：commons-beanutils-1.8.0.jar和Commons-logg-1.1.1.jar
1.  Setproperty
BeanUtils.setProperty(Object,”IdCard”,”370123199809206754”);
2.  Gerproperty
Object val=BeanUtils.getProperty(object,”IdCard”);
            